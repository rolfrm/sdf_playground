OPT = -g0 -O3
LIB_SOURCES1 = distance_fields.c hsv.c
TARGET_SOURCES = src/gradient.c
LIB_SOURCES = $(addprefix src/, $(LIB_SOURCES1))
CC = gcc
TARGET = book.pdf
TARGETS = 
LIB_OBJECTS =$(LIB_SOURCES:.c=.o)
TARGET_OBJECTS = $(TARGET_SOURCES:.c=.o)
LDFLAGS= -L. $(OPT) # -Wl,--gc-sections -Wl,-s -fdata-sections -ffunction-sections
LIBS= iron/libiron.a -lm -licydb -lX11 -lglfw -lGL -lpng
ALL= $(TARGET)
CFLAGS = -Isrc/ -I. -Ilibicydb/include -Iinclude/ -std=gnu11 -c $(OPT) -Werror=implicit-function-declaration -Wformat=0 -D_GNU_SOURCE -fdiagnostics-color  -Wwrite-strings -Werror=uninitialized -DUSE_VALGRIND -DDEBUG -Wall

$(TARGET): $(LIB_OBJECTS) $(TARGET_OBJECTS) libiron.so gradient.png circle.png circle2.png circle3.png gradient_hsv.png circle4.png repeat.png repeat2.png curves.png
	echo ok #$(CC) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS) -o $@

%.bin: src/%.o $(LIB_OBJECTS)
	$(CC) $(LDFLAGS) $< $(LIB_OBJECTS) $(LIBS) -o $@
%.png: %.bin
	./$< $@  512 512 


libiron.so: iron/libiron.so
	make -C iron
	cp iron/libiron.so .

all: $(ALL)

.c.o:
	$(CC) $(CFLAGS) $< -o $@ -MMD -MF $@.depends

depend: h-depend
clean:
	rm -f $(LIB_OBJECTS) $(ALL) src/*.o.depends src/*.o 
.PHONY: test
test: $(TARGET)
	make -f makefile.compiler
	make -f makefile.test test

-include $(LIB_OBJECTS:.o=.o.depends)


